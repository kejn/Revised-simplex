#ifndef EXERCISES_H
#define EXERCISES_H

#include <vector>
#include <string>


namespace zadanieString {
    typedef std::vector<std::vector<std::vector<std::string>>> zbiorZadan;

    zbiorZadan zadanie = {
        {// #1
            {"max x0 = x1 - x2"},
            {"-2", "x1", " + ", " ", "x2", " <= ", "3 "},
            {"  ", "x1", " + ", " ", "x2", " <= ", "6 "},
            {" 5", "x1", " + ", "2", "x2", " <= ", "20"}
        },
        {// #2
            {"max x0 = x1 + x2"},
            {"-2", "x1", " + ", " ", "x2", " <= ", "3 "},
            {"  ", "x1", " + ", " ", "x2", " <= ", "6 "},
            {" 5", "x1", " + ", "2", "x2", " <= ", "20"}
        },
        {// #3
            {"max x0 = x1 + 2x2"},
            {"-2", "x1", " + ", " ", "x2", " <= ", "3 "},
            {"  ", "x1", " + ", " ", "x2", " <= ", "6 "},
            {" 5", "x1", " + ", "2", "x2", " <= ", "20"}
        },
        {// #4
            {"min x0 = x1 - x2"},
            {"-2", "x1", " + ", " ", "x2", " <= ", "3 "},
            {"  ", "x1", " + ", " ", "x2", " <= ", "6 "},
            { " 5", "x1", " + ", "2", "x2", " <= ", "20"}
        },
        {// #5
            {"max x0 = x1 + 2x2"},
            {"-2", "x1", " + ", " ", "x2", " >= ", "2"},
            {"  ", "x1", " - ", "2", "x2", " >= ", "2"}
        },
        {// #6
            {"min x0 = x1 - x2"},
            { "  ", "x1", " - ", " ", "x2", " <= ", "2"},
            { "- ", "x1", " - ", " ", "x2", " >= ", "2"}
        },
        {// #7
            {"min x0 = 0.3x1 + 0.6x2 + 0.2x3"},
            { "7", "x1", " + ", "3", "x2", "   ", " ", "  ", " >= ", "2100"},
            { " ", "  ", "   ", " ", "x2", " + ", "2", "x3", " >= ", "1200"}
        },
        {// #8
            {"max x0 = 2100x1 + 1200x2"},
            { " ", "x1", "   ", " ", "  ", " <= ", "0.3"},
            { "3", "x1", " + ", " ", "x2", " <= ", "0.6"},
            { " ", "  ", "   ", "2", "x2", " <= ", "0.2"}
        },
        {// #9
            {"max x0 = x1 + 2x2"},
            { " ", "x1", " + ", " ", "x2", " <= ", "100"},
            { "6", "x1", " + ", "9", "x2", " <= ", "720"},
            { " ", "  ", "   ", " ", "x2", " <= ", "60 "}
        },
        {// #10
            {"max x0 = x1 + x2"},
            {" -", "x1", " + ", " ", "x2", " <= ", "1"},
            {"  ", "x1", " + ", "2", "x2", " >= ", "5"},
            {"  ", "x1", "   ", " ", "  ", " <= ", "3"}
        },
        {// #11
            {"min x0 = x1 - 4x2"},
            {" -", "x1", " + ", " ", "x2", " <= ", "1"},
            {"  ", "x1", " + ", "2", "x2", " >= ", "5"},
            {"  ", "x1", "   ", " ", "  ", " <= ", "3"}
        },
        {// #12
            {"min x0 = 0.1x1 + 0.2x2 + 0.2x3 + 0.3x4 + 0.4x5"},
            {" 4", "x1", " + ", " ", "x2", " + ", "8", "x3", " + ", "5", "x4", " + ", "2", "x5", "   ", " ", "  ", " >= ", "12000"},
            {"  ", "  ", "   ", " ", "x2", "   ", " ", "  ", " + ", " ", "x4", " + ", "2", "x5", " + ", "3", "x6", " >= ", "18000"}
        },
        {// #13
            {"min x0 = -2x1 + x2"},
            {"  ", "x1", " + ", "2", "x2", " <= ", "6"},
            {"  ", "x1", " + ", "2", "x2", " >= ", "2"},
            {" 2", "x1", " - ", " ", "x2", " <= ", "2"}
        },
        {// #14
            {"min x0 = -2x1 + x2"},
            {"  ", "x1", " + ", "2", "x2", " >= ", "2"},
            {" 2", "x1", " - ", " ", "x2", " <= ", "2"}
        },
        {// #15
            {"min x0 = 900x1 + 1200x2"},
            {"  ", "x1", " + ", "2", "x2", " >= ", "4"},
            {" 2", "x1", " + ", "2", "x2", " >= ", "6"},
            {"1.5", "x1", " + ", "1.5", "x2", " >= ", "3"},
            {" 6", "x1", " + ", "4", "x2", " >= ", "12"},
        },
        {// #16
            {"max x0 = x1 + x2"},
            {"  ", "x1", " + ", "2", "x2", " >= ", "5"},
            {" -", "x1", " + ", " ", "x2", " <= ", "1"},
            {"  ", "x1", "   ", " ", "  ", " <= ", "3"}
        }
    };
    const char *zad(int exerciseIndex, int row, int col)
    { return zadanie[exerciseIndex][row][col].c_str(); }

    // liczba zmiennych
    const size_t N(int i) { return zadanie[i][1].size(); }

    // liczba ograniczeń
    const size_t M(int i) { return zadanie[i].size()-1; }
}

namespace zadanieDouble {
    typedef std::vector<std::vector<std::vector<double>>> zbiorZadan;

    zbiorZadan zadanie = {
        {// #1
            { 0, 1, -1},
            {-2, 1, 0, 3},
            { 1, 1, 0, 6},
            { 5, 2, 0, 20}
        },
        {// #2
            { 0, 1, 1},
            {-2, 1, 0, 3},
            { 1, 1, 0, 6},
            { 5, 2, 0, 20}
        },
        {// #3
            { 0, 1, 2},
            {-2, 1, 0, 3},
            { 1, 1, 0, 6},
            { 5, 2, 0, 20}
        },
        {// #4
            { 1, 1, -1},
            {-2, 1, 0, 3},
            { 1, 1, 0, 6},
            { 5, 2, 0, 20}
        },
        {// #5
            { 0, 1, 2},
            {-2,  1, 1, 2},
            { 1, -2, 1, 2}
        },
        {// #6
            { 1, 1, -1},
            { 1, -1, 0, 2},
            {-1, -1, 1, 2}
        },
        {// #7
            { 1, 0.3, 0.6, 0.2},
            { 7, 3, 0, 1, 2100},
            { 0, 1, 2, 1, 1200}
        },
        {// #8
            { 0, 2100, 1200},
            { 1, 0, 0, 0.3},
            { 3, 1, 0, 0.6},
            { 0, 2, 0, 0.2}
        },
        {// #9
            { 0, 1, 2},
            { 1, 1, 0, 100},
            { 6, 9, 0, 720},
            { 0, 1, 0, 60}
        },
        {// #10
            { 0, 1, 1},
            {-1, 1, 0, 1},
            { 1, 2, 1, 5},
            { 1, 0, 0, 3}
        },
        {// #11
            { 1, 1,-4},
            {-1, 1, 0, 1},
            { 1, 2, 1, 5},
            { 1, 0, 0, 3}
        },
        {// #12
            { 1, 0.1, 0.2, 0.2, 0.3, 0.4, 0},
            { 4, 1, 8, 5, 2, 0, 1, 12000},
            { 0, 1, 0, 1, 2, 3, 1, 18000}
        },
        {// #13
            { 1, -2, 1},
            { 1, 2, 0, 6},
            { 1, 2, 1, 2},
            { 2,-1, 0, 2}
        },
        {// #14
            { 1,-2, 1},
            { 1, 2, 1, 2},
            { 2,-1, 0, 2}
        },
        {// #15
            { 1, 900, 1200},
            { 1, 2, 1, 4},
            { 2, 2, 1, 6},
            { 1.5, 1.5, 1, 3},
            { 6, 4, 1, 12}
        },
        {// #16
            { 0, 1, 1},
            { 1, 2, 1, 5},
            {-1, 1, 0, 1},
            { 1, 0, 0, 3}
        }
    };
    double zad(int exerciseIndex, int row, int col)
    { return zadanie[exerciseIndex][row][col]; }

    // liczba zmiennych
    const size_t N(int i) { return zadanie[i][0].size()-1; }

    // liczba ograniczeń
    const size_t M(int i) { return zadanie[i].size()-1; }

    //liczba zadań
    const size_t exNum() { return zadanie.size(); }
}


#endif // EXERCISES_H

